#! /u../staging/bin/env bash
# Mes --- Maxwell Equations of Software
# Copyright © 2017,2019 Jan Nieuwenhuizen <janneke@gnu.org>
# Copyright © 2017,2019 Jeremiah Orians
#
# This file is part of Mes.
#
# Mes is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or (at
# your option) any later version.
#
# Mes is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Mes.  If not, see <http://www.gnu.org/licenses/>.

# Warning all binaries prior to the use of blood-elf will not be readable by
# Objdump, you may need to use ndism or gdb to view the assembly in the binary.

#################################
# Phase-1 Build hex1 from hex0  #
#################################
./hex0 hex1_x86.hex0 hex1
# hex1 adds support for single character labels and is available in various froms
# in mescc-tools/x86_bootstrap to allow you various ways to verify correctness

#################################
# Phase-1b Build catm from hex0 #
#################################
./hex0 catm_x86.hex0 catm
# catm removes the need for cat or shell support for redirection by providing
# equivalent functionality via catm output_file input1 input2 ... inputN

#################################
# Phase-2 Build hex2 from hex1  #
#################################
./hex1 hex2_x86.hex1 hex2-0
# hex2 adds support for long labels and absolute addresses thus allowing it
# to function as an effective linker for later stages of the bootstrap
# This is a minimal version which will be used to bootstrap a much more advanced
# version in a later stage.

###############################
# Phase-3 Build M0 from hex2  #
###############################
./catm hold ELF-i386.hex2 M0_x86.hex2
./hex2-0 hold M0
# M0 is the architecture specific version of M1 and is by design single
# architecture only and will be replaced by the C code version of M1

###################################
# Phase-4 Build cc_x86 from M0    #
###################################
./M0 cc_x86.M1 temp1
./catm hold ELF-i386.hex2 temp1
./hex2-0 hold cc_x86

#########################################
# Phase-5 Build M2-Planet from cc_x86   #
#########################################
./catm hold ../sources/M2-Planet/test/common_x86/functions/file.c \
	../sources/M2-Planet/test/common_x86/functions/malloc.c \
	../sources/M2-Planet/functions/calloc.c \
	../sources/M2-Planet/test/common_x86/functions/exit.c \
	../sources/M2-Planet/functions/match.c \
	../sources/M2-Planet/functions/in_set.c \
	../sources/M2-Planet/functions/numerate_number.c \
	../sources/M2-Planet/functions/file_print.c \
	../sources/M2-Planet/functions/number_pack.c \
	../sources/M2-Planet/functions/string.c \
	../sources/M2-Planet/functions/require.c \
	../sources/M2-Planet/cc.h \
	../sources/M2-Planet/cc_reader.c \
	../sources/M2-Planet/cc_strings.c \
	../sources/M2-Planet/cc_types.c \
	../sources/M2-Planet/cc_core.c \
	../sources/M2-Planet/cc.c
./cc_x86 hold M2.M1
./catm hold x86_defs.M1 libc-core.M1 M2.M1
./M0 hold temp1
./catm hold ELF-i386.hex2 temp1
./hex2-0 hold M2

#############################################
# Phase-6 Build blood-elf-0 from C sources  #
#############################################
./M2 --architecture x86 \
	-f ../sources/M2-Planet/test/common_x86/functions/exit.c \
	-f ../sources/M2-Planet/test/common_x86/functions/file.c \
	-f ../sources/M2-Planet/functions/file_print.c \
	-f ../sources/M2-Planet/test/common_x86/functions/malloc.c \
	-f ../sources/M2-Planet/functions/calloc.c \
	-f ../sources/M2-Planet/functions/match.c \
	-f ../sources/mescc-tools/blood-elf.c \
	-f ../sources/M2-Planet/functions/require.c \
	-f ../sources/M2-Planet/functions/in_set.c \
	-o blood-elf.M1

./catm hold x86_defs.M1 libc-core.M1 blood-elf.M1
./M0 hold temp1
./catm hold ELF-i386.hex2 temp1
./hex2-0 hold blood-elf-0
# This is the last stage where the binaries will not have debug info
# and the last piece built that isn't part of the output binaries

#####################################
# Phase-7 Build hex2 from C sources #
#####################################
./M2 --architecture x86 \
	-f ../sources/M2-Planet/test/common_x86/functions/exit.c \
	-f ../sources/M2-Planet/test/common_x86/functions/file.c \
	-f ../sources/M2-Planet/functions/file_print.c \
	-f ../sources/M2-Planet/test/common_x86/functions/malloc.c \
	-f ../sources/M2-Planet/functions/calloc.c \
	-f ../sources/M2-Planet/functions/match.c \
	-f ../sources/M2-Planet/functions/require.c \
	-f ../sources/M2-Planet/functions/in_set.c \
	-f ../sources/M2-Planet/functions/numerate_number.c \
	-f ../sources/M2-Planet/test/common_x86/functions/stat.c \
	-f ../sources/mescc-tools/hex2_linker.c \
	--debug \
	-o hex2_linker.M1

./blood-elf-0 -f hex2_linker.M1 -o hex2_linker-footer.M1
./catm hold x86_defs.M1 libc-core.M1 hex2_linker.M1 hex2_linker-footer.M1
./M0 hold temp1
./catm hold ELF-i386-debug.hex2 temp1
./hex2-0 hold ../staging/bin/hex2
# This is the last stage where we will be using the handwritten hex2 and instead
# be using the far more powerful, cross-platform version with a bunch more goodies

###################################
# Phase-8 Build M1 from C sources #
###################################
./M2 --architecture x86 \
	-f ../sources/M2-Planet/test/common_x86/functions/exit.c \
	-f ../sources/M2-Planet/test/common_x86/functions/file.c \
	-f ../sources/M2-Planet/functions/file_print.c \
	-f ../sources/M2-Planet/test/common_x86/functions/malloc.c \
	-f ../sources/M2-Planet/functions/calloc.c \
	-f ../sources/M2-Planet/functions/match.c \
	-f ../sources/M2-Planet/functions/in_set.c \
	-f ../sources/M2-Planet/functions/numerate_number.c \
	-f ../sources/M2-Planet/functions/string.c \
	-f ../sources/M2-Planet/functions/require.c \
	-f ../sources/mescc-tools/M1-macro.c \
	--debug \
	-o M1-macro.M1

./blood-elf-0 -f M1-macro.M1 -o M1-macro-footer.M1
./catm hold x86_defs.M1 libc-core.M1 M1-macro.M1 M1-macro-footer.M1
./M0 hold temp1
../staging/bin/hex2 -f ELF-i386-debug.hex2 \
	-f temp1 \
	--LittleEndian \
	--architecture x86 \
	--BaseAddress 0x8048000 \
	-o ../staging/bin/M1 \
	--exec_enable

# This is the last stage where catm will need to be used and the last stage where
# M0 is used, as we will being using it's much more powerful and cross-platform
# version with a bunch of extra goodies.

#####################################
# Phase-9 Build kaem from C sources #
#####################################
./M2 --architecture x86 \
	-f ../sources/M2-Planet/test/common_x86/functions/exit.c \
	-f ../sources/M2-Planet/test/common_x86/functions/file.c \
	-f ../sources/M2-Planet/functions/file_print.c \
	-f ../sources/M2-Planet/test/common_x86/functions/malloc.c \
	-f ../sources/M2-Planet/functions/calloc.c \
	-f ../sources/M2-Planet/functions/match.c \
	-f ../sources/M2-Planet/functions/in_set.c \
	-f ../sources/M2-Planet/functions/numerate_number.c \
	-f ../sources/M2-Planet/test/common_x86/functions/fork.c \
	-f ../sources/M2-Planet/test/common_x86/functions/execve.c \
	-f ../sources/M2-Planet/test/common_x86/functions/chdir.c \
	-f ../sources/M2-Planet/test/common_x86/functions/getcwd.c \
    -f ../sources/M2-Planet/functions/string.c \
	-f ../sources/M2-Planet/functions/require.c \
	-f ../sources/mescc-tools/kaem/kaem.c \
	--debug \
	-o kaem.M1

./blood-elf-0 -f kaem.M1 -o kaem-footer.M1

../staging/bin/M1 -f x86_defs.M1 \
	-f libc-core.M1 \
	-f kaem.M1 \
	-f kaem-footer.M1 \
	--LittleEndian \
	--architecture x86 \
	-o hold

../staging/bin/hex2 -f ELF-i386-debug.hex2 \
	-f hold \
	--LittleEndian \
	--architecture x86 \
	--BaseAddress 0x8048000 \
	-o ../staging/bin/kaem \
	--exec_enable

